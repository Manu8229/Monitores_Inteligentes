Exerc√≠cio: Monitoramento Inteligente de Sensores na Ind√∫stria 4.0
Contexto:
Em uma f√°brica automatizada, diversos sensores monitoram a temperatura e a 
vibra√ß√£o das m√°quinas para prever falhas e melhorar a manuten√ß√£o. Voc√™ foi designado para 
desenvolver um programa em Python que analisa os dados desses sensores e gera alertas quando 
valores cr√≠ticos s√£o atingidos.

Desafio 1: Leitura e Armazenamento de Dados
Crie um programa que armazene leituras de sensores em uma lista de dicion√°rios. Cada sensor deve registrar:

ID da m√°quina (string)
Temperatura (¬∞C) (flutuante)
Vibra√ß√£o (mm/s) (flutuante)
Tarefa: Gere 10 leituras fict√≠cias e armazene em uma lista.

Desafio 2: Identifica√ß√£o de Anomalias
Adicione uma fun√ß√£o que analisa os dados armazenados e verifica se alguma m√°quina apresenta valores cr√≠ticos:

Temperatura acima de 80¬∞C
Vibra√ß√£o acima de 10 mm/s
Se um desses valores for excedido, exiba um alerta com o ID da m√°quina e a leitura correspondente.

Desafio 3: Relat√≥rio Resumido
Crie uma fun√ß√£o que gera um relat√≥rio com:

A temperatura m√©dia das m√°quinas
A vibra√ß√£o m√©dia das m√°quinas
O n√∫mero total de alertas gerados
O relat√≥rio deve ser exibido atraves de um desboard

import random
import time
import csv
import matplotlib.pyplot as plt
from itertools import count

def gerar_leituras(num_leituras):
    """ Gera leituras fict√≠cias de sensores """
    leituras = []
    for i in range(num_leituras):
        id_maquina = f"MAQ{i+1}"
        temperatura = round(random.uniform(50, 100), 2)
        vibracao = round(random.uniform(5, 15), 2)
        leitura = {
            "ID da m√°quina": id_maquina,
            "Temperatura (¬∞C)": temperatura,
            "Vibra√ß√£o (mm/s)": vibracao
        }
        leituras.append(leitura)
    return leituras

def verificar_anomalias(leituras):
    """ Verifica anomalias nas leituras dos sensores """
    alertas = []
    for leitura in leituras:
        if leitura["Temperatura (¬∞C)"] > 80:
            alertas.append((leitura["ID da m√°quina"], "Temperatura", leitura["Temperatura (¬∞C)"]))
        if leitura["Vibra√ß√£o (mm/s)"] > 10:
            alertas.append((leitura["ID da m√°quina"], "Vibra√ß√£o", leitura["Vibra√ß√£o (mm/s)"]))
    return alertas

def gerar_relatorio(leituras, alertas):
    """ Gera um relat√≥rio resumido com estat√≠sticas das leituras """
    total_leituras = len(leituras)
    total_alertas = len(alertas)
    
    temperatura_media = sum(leitura["Temperatura (¬∞C)"] for leitura in leituras) / total_leituras
    vibracao_media = sum(leitura["Vibra√ß√£o (mm/s)"] for leitura in leituras) / total_leituras
    
    print("\n--- Relat√≥rio Resumido ---")
    print(f"Temperatura m√©dia: {temperatura_media:.2f} ¬∞C")
    print(f"Vibra√ß√£o m√©dia: {vibracao_media:.2f} mm/s")
    print(f"Total de alertas gerados: {total_alertas}")

def salvar_dados_csv(leituras, timestamp):
    """ Salva os dados em um arquivo CSV """
    with open("dados_sensores.csv", mode="a", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=["Timestamp", "ID da m√°quina", "Temperatura (¬∞C)", "Vibra√ß√£o (mm/s)"])
        if file.tell() == 0:
            writer.writeheader()
        for leitura in leituras:
            writer.writerow({"Timestamp": timestamp, **leitura})
    print("\nDados salvos no arquivo 'dados_sensores.csv'.")

def exibir_dashboard(leituras):
    """ Exibe gr√°ficos de temperatura e vibra√ß√£o com alertas destacados """
    ids = [leitura["ID da m√°quina"] for leitura in leituras]
    temperaturas = [leitura["Temperatura (¬∞C)"] for leitura in leituras]
    vibracoes = [leitura["Vibra√ß√£o (mm/s)"] for leitura in leituras]
    
    cores_temp = ['red' if temp > 80 else 'blue' for temp in temperaturas]
    cores_vib = ['red' if vib > 10 else 'green' for vib in vibracoes]

    plt.clf()
    fig, ax = plt.subplots(2, 1, figsize=(10, 8))
    
    ax[0].bar(ids, temperaturas, color=cores_temp)
    ax[0].axhline(y=80, color='red', linestyle='--', label='Limite de Temperatura')
    ax[0].set_title('Temperatura das M√°quinas')
    ax[0].set_ylabel('Temperatura (¬∞C)')
    ax[0].legend()
    
    ax[1].bar(ids, vibracoes, color=cores_vib)
    ax[1].axhline(y=10, color='red', linestyle='--', label='Limite de Vibra√ß√£o')
    ax[1].set_title('Vibra√ß√£o das M√°quinas')
    ax[1].set_ylabel('Vibra√ß√£o (mm/s)')
    ax[1].legend()
    
    plt.tight_layout()
    plt.pause(1)

def main():
    """ Loop principal para simula√ß√£o cont√≠nua a cada 1 minuto """
    plt.ion()  # Modo interativo do Matplotlib
    contador = count(start=1)
    
    while True:
        timestamp = f"Leitura {next(contador)}"
        print(f"\n{timestamp}: Gerando novas leituras...")
        
        leituras_sensores = gerar_leituras(10)
        alertas = verificar_anomalias(leituras_sensores)
        
        print("\nAlertas de anomalias:")
        for alerta in alertas:
            print(f"ALERTA: M√°quina {alerta[0]} com {alerta[1]} cr√≠tica de {alerta[2]}")
        
        gerar_relatorio(leituras_sensores, alertas)
        salvar_dados_csv(leituras_sensores, timestamp)
        exibir_dashboard(leituras_sensores)
        
        time.sleep(60)  # Aguarda 1 minuto antes de gerar novas leituras

if __name__ == "__main__":
    main()


Sugest√µes para Melhorias üîß
Adi√ß√£o de n√∫cleos para destacar alertas no gr√°fico:

Voc√™ pode mudar a cor das barras que ultrapassam os limites cr√≠
Gerar leituras em tempo real (Desafio Extra):

Usando um loop com time.sleep(2), v
Salvar os dados em um arquivo CSV ou banco de dados:

Isso permitiria analisar as tend√™ncias ao
Melhoria na exibi√ß√£o dos alertas:

Integra√ß√£o:

Para integrar esse programa a sensores reais no contexto da Ind√∫stria 4.0, seria necess√°rio

1. Hardware
Sensores Industriais :
Temperatura : Sen
Vibra√ß√£o : S
Controlador ou Gateway IoT:
Pode ser um Raspberry Pi, ESP32, Arduino, ou um **PLC (ControladorPLC (Controlador L√≥gico Program√°vel) pa
Interfaces de Comunica√ß√£o :
Modbus (RTU/TCP) : Um
MQTT :
OPC UA:Padr√£
Wi-Fi, Ethernet ou 4G/5G : Para enviar
2. Programas
Leitura dos Sensores
C√≥digo para coleta de dados via GPIO (Arduino/Raspberry Pi) , *Modbus (PLC) ouAPIs MQTT/OPC UA .
Banco de Dados
Atualmente, voc√™ salva os dados em um CSV. Para produ√ß√£o, √© melhor usar um banco como PostgreSQL, MySQL ou InfluxDB (especial
Dashboard e Monitoramento
Ferramentas como Grafana, Power BI ou um sistema web pr√≥prio com Flask/Django + React para ex
3. Infraestrutura e Cloud (Opcional)
Servidores locais ou na nuvem (AWS, Azure, Google Cloud)
Servi√ßos IoT espec√≠ficos :
4. Seguran√ßa e Manuten√ß√£o
Protocolo seguro (TLS/SSL) para transmiss√£o de dados
Autentica√ß√£o e controle de acesso aos sensores
Monitoramento remoto e alertas via e-mail, SMS ou notifica√ß√µes push